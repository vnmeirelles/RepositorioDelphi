unit untGenericDAO;

interface

Uses Db, Rtti, CAtribEntity, TypInfo, SysUtils, srvModBaseDados;

type
  TGenericDAO = class
    private
      class function GetTableName<T: class>(Obj: T): String;
    public
      //Procedimentos para o CRUD
      class function Insert<T: class>(Obj: T):Boolean;
      class function GetAll<T: class>(Obj: T):TDataSet;
  end;

implementation

class function TGenericDAO.GetTableName<T>(Obj: T):String;
var
  Contexto: TRttiContext;
  typObj: TRttiType;
  Atributo:TCustomAttribute;
  strTable: String;
begin
  Contexto := TRttiContext.Create;
  TypObj := Contexto.GetType(TObject(Obj).ClassInfo);

  for Atributo in TypObj.GetAttributes do
    begin
      if Atributo is TableName then
        Exit(TableName(Atributo).Name);
    end;
end;

//funções para manipular as entidades
class function TGenericDAO.Insert<T>(Obj: T):boolean;
var
  Contexto: TRttiContext;
  TypObj: TRttiType;
  Prop: TRttiProperty;
  strInsert, strFields, strValues: String;
  Atributo: TCustomAttribute;
 Begin
  strInsert := '';
  strFields := '';
  strValues := '';

  Contexto := TRttiContext.Create;
  TypObj := Contexto.GetType(TObject(Obj).ClassInfo);

  for Prop in TypObj.GetProperties do begin
    for Atributo in Prop.GetAttributes do begin
        if Atributo is FieldName then begin
           strFields := strFields + FieldName(Atributo).Name
           + ',';
           case Prop.GetValue(TObject(Obj)).Kind of

             tkWChar, tkLString, tkWString, tkString,
             tkChar, tkUString:

               strValues := strValues +
               QuotedStr(Prop.GetValue(TObject(Obj)).AsString)
               + ',';

             tkInteger, tkInt64:

               strValues := strValues +
               IntToStr(Prop.GetValue(TObject(Obj)).AsInteger)
               + ',';

             tkFloat:

               strValues := strValues +
               FloatToStr(Prop.GetValue(TObject(Obj)).AsExtended)
               + ',';

             else
               raise Exception.Create('Type not Supported');
           end;
       end;
     end;
  end;
  strFields := Copy(strFields, 1, Length(strFields) - 1);
  strValues := Copy(strValues, 1, Length(strValues) - 1);
  strInsert := strInsert + ' ( ' + strFields + ' ) VALUES ( ' + strValues + ' + ) ";

  result := DSServerModuleBaseDados.execSql(strInsert);
end;

class function TGenericDAO.GetAll<T>(Obj: T): TDataSet;
begin
  result := DSServerModuleBaseDados.getDataSet(''''SELECT T1.* '''' +
    '''' FROM '''' + GetTableName(Obj) + '''' T1 '''' );
end;

end.
